#set($dollar = '$')
#set($pound = '#')
#set($backslash = '\')
${pound} ------------------------------------------------------------------------------
${pound} level: OFF, FATAL, ERROR, WARN, INFO, DEBUG, ALL or a custom level value.
${pound} ------------------------------------------------------------------------------
${pound} log4j.rootCategory=stdout, rolling, xml, lf5, lf5r, socketLogger
${pound} ------------------------------------------------------------------------------
log4j.rootCategory=ALL, rolling
log4j.category.adalid=INFO, stdoutError, stdoutWarn, stdoutInfo, stdoutDebug, stdoutTrace
log4j.additivity.adalid=true
log4j.category.adalid.commons.velocity=INFO, stdoutError, stdoutWarn, stdoutInfo, stdoutDebug, stdoutTrace
log4j.additivity.adalid.commons.velocity=false
log4j.category.meta=INFO, stdoutError, stdoutWarn, stdoutInfo, stdoutDebug, stdoutTrace
log4j.additivity.meta=false

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdoutError)
log4j.appender.stdoutError=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutError.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutError.layout.ConversionPattern=${backslash}u001b[0;31m%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
log4j.appender.stdoutError.threshold=ERROR

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdoutWarn)
log4j.appender.stdoutWarn=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutWarn.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutWarn.layout.ConversionPattern=${backslash}u001b[0;34m%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
log4j.appender.stdoutWarn.threshold=WARN
log4j.appender.stdoutWarn.filter.filter1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.stdoutWarn.filter.filter1.levelMin=WARN
log4j.appender.stdoutWarn.filter.filter1.levelMax=WARN

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdoutInfo)
log4j.appender.stdoutInfo=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutInfo.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutInfo.layout.ConversionPattern=${backslash}u001b[0m%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
log4j.appender.stdoutInfo.threshold=INFO
log4j.appender.stdoutInfo.filter.filter1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.stdoutInfo.filter.filter1.levelMin=INFO
log4j.appender.stdoutInfo.filter.filter1.levelMax=INFO

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdoutDebug)
log4j.appender.stdoutDebug=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutDebug.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutDebug.layout.ConversionPattern=${backslash}u001b[0m%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
log4j.appender.stdoutDebug.threshold=DEBUG
log4j.appender.stdoutDebug.filter.filter1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.stdoutDebug.filter.filter1.levelMin=DEBUG
log4j.appender.stdoutDebug.filter.filter1.levelMax=DEBUG

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdoutTrace)
log4j.appender.stdoutTrace=org.apache.log4j.ConsoleAppender
log4j.appender.stdoutTrace.layout=org.apache.log4j.PatternLayout
log4j.appender.stdoutTrace.layout.ConversionPattern=${backslash}u001b[0m%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
log4j.appender.stdoutTrace.threshold=TRACE
log4j.appender.stdoutTrace.filter.filter1=org.apache.log4j.varia.LevelRangeFilter
log4j.appender.stdoutTrace.filter.filter1.levelMin=TRACE
log4j.appender.stdoutTrace.filter.filter1.levelMax=TRACE

${pound} BEGIN APPENDER: CONSOLE APPENDER (stdout)
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
${pound} END APPENDER: CONSOLE APPENDER (stdout)

${pound} BEGIN APPENDER: ROLLING FILE APPENDER (rolling)
log4j.appender.rolling=org.apache.log4j.RollingFileAppender
log4j.appender.rolling.file=log4j.appender.rolling.log
log4j.appender.rolling.MaxFileSize=1000KB
log4j.appender.rolling.MaxBackupIndex=2
log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling.layout.ConversionPattern=%d{dd-MM-yy HH:mm:ss} | %-5p | %-20c{1} | %m%n
${pound} END APPENDER: ROLLING FILE APPENDER (rolling)

${pound} BEGIN APPENDER: XML FILE APPENDER (xml)
${pound} A standard file appender where we have put an XML layout onto the output
${pound} event records. A file put out using this technique can be loaded after
${pound} the fact into Chainsaw for viewing, filtering, searching, etc.
log4j.appender.xml=org.apache.log4j.FileAppender
log4j.appender.xml.file=log4j.appender.xml.log
log4j.appender.xml.append=false
log4j.appender.xml.layout=org.apache.log4j.xml.XMLLayout
${pound} END APPENDER: XML FILE APPENDER (xml)

${pound} BEGIN APPENDER: LogFactor5 APPENDER (lf5)
${pound} LogFactor5 is a Swing window that directly receives logging messages and
${pound} displays them. It offers filtering, searching etc. similar to Chainsaw or
${pound} Lumbermill but you don't have to use a socket appender so it should be faster
${pound} when the logging display is on the same machine as the program issuing
${pound} messages.
log4j.appender.lf5=org.apache.log4j.lf5.LF5Appender
log4j.appender.lf5.MaxNumberOfRecords=10000
${pound} END APPENDER: LogFactor5 APPENDER (lf5)

${pound} BEGIN APPENDER: LogFactor5 ROLLING FILE APPENDER (lf5r)
${pound} Like the XML appender above, this is a specialized format designed to be read
${pound} from a tool. In this case LogFactor5 can load up files in this format for
${pound} after the fact review.
log4j.appender.lf5r=org.apache.log4j.RollingFileAppender
log4j.appender.lf5r.file=log4j.appender.lf5r.log
log4j.appender.lf5r.layout=org.apache.log4j.PatternLayout
log4j.appender.lf5r.layout.ConversionPattern=[slf5s.start]%d{DATE}[slf5s.DATE]%n %p[slf5s.PRIORITY]%n%x[slf5s.NDC]%n%t[slf5s.THREAD]%n%c[slf5s.CATEGORY]%n %l[slf5s.LOCATION]%n%m[slf5s.MESSAGE]%n%n
${pound} END APPENDER: LogFactor5 ROLLING FILE APPENDER (lf5r)

${pound} BEGIN APPENDER: SOCKET APPENDER (socketLogger)
${pound} Note: if you don't have anything configured to accept the events
${pound} from the socketLogger appender, you'll see an exception on program
${pound} startup (to console), and occasional status messages (to console)
${pound} on if the log4j system has managed to connect to the specified
${pound} socket.
${pound} log4j.appender.socketLogger=org.apache.log4j.net.SocketAppender
${pound} log4j.appender.socketLogger.RemoteHost=localhost
${pound} log4j.appender.socketLogger.Port=4445
${pound} log4j.appender.socketLogger.LocationInfo=false
${pound} END APPENDER: SOCKET APPENDER (socketLogger)
